define _NUMBER_PROVIDER = literal('MaxRecursionReached').storeFlat("tokens", "").name("json_literal"); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _MIN_MAX = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _MIN_MAX_INT = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _POTION_ID = STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"); define _ITEM_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('count').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('durability').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('enchantments').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('levels').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(group(literal('stored_enchantments')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('levels').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('items').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(ITEM_ID.storeVar("tokens").hint("ITEM_ID"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND")), group(literal('potion').storeFlat("tokens", "").name("json_key"), optional(COLON), _POTION_ID.hint("_POTION_ID")), group(literal('tag').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION_TAGGED.storeVar("tokens").hint("RESOURCE_LOCATION_TAGGED"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _LOCATION_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('biome').storeFlat("tokens", "").name("json_key"), optional(COLON), BIOME_ID.storeVar("tokens").hint("BIOME_ID")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('blocks').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(BLOCK_ID.storeVar("tokens").hint("BLOCK_ID"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('tag').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION_TAGGED.storeVar("tokens").hint("RESOURCE_LOCATION_TAGGED")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), BOOLEAN.storeVar("tokens").hint("BOOLEAN"), STRING.storeVar("tokens").hint("STRING"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('dimension').storeFlat("tokens", "").name("json_key"), optional(COLON), DIMENSION_ID.storeVar("tokens").hint("DIMENSION_ID")), group(literal('feature').storeFlat("tokens", "").name("json_key"), optional(COLON), STRUCTURE_ID.storeFlat("tokens", "").hint("STRUCTURE_ID")), group(literal('fluid').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('fluid').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('flowing_water')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('water')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('lava')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('empty')).storeFlat("tokens", "").name("json_literal"))), group(literal('tag').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION_TAGGED.storeVar("tokens").hint("RESOURCE_LOCATION_TAGGED")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), BOOLEAN.storeVar("tokens").hint("BOOLEAN"), STRING.storeVar("tokens").hint("STRING"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('light').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('light').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('position').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(REAL.storeVar("tokens").hint("REAL"), _MIN_MAX.hint("_MIN_MAX"))), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(REAL.storeVar("tokens").hint("REAL"), _MIN_MAX.hint("_MIN_MAX"))), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(REAL.storeVar("tokens").hint("REAL"), _MIN_MAX.hint("_MIN_MAX")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('smokey').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _ENTITY_PREDICATE = literal('MaxRecursionReached').storeFlat("tokens", "").name("json_literal"); define _ENTITY_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(EFFECT_ID.storeVar("tokens").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('ambient').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('amplifier').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('visible').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('equipment').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('mainhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('offhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('head').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('chest').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('legs').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('feet').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('flags').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('is_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sneaking')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sprinting')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_swimming')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_baby')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(group(literal('lightning_bolt')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('blocks_set_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('entity_struck')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND")), group(literal('passenger').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('looking_at')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('advancements').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), choice(BOOLEAN.storeVar("tokens").hint("BOOLEAN"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('gamemode').storeFlat("tokens", "").name("json_key"), optional(COLON), GAMEMODE.storeFlat("tokens", "").hint("GAMEMODE")), group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('stats').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('custom')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('animals_bred')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('aviate_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bell_ring')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('boat_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_armor')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_banner')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('climb_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crouch_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_blocked_by_shield')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_taken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('deaths')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('drop')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('eat_cake_slice')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enchant_item')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fall_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fill_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fish_caught')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fly_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('horse_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dispenser')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dropper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_hopper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_anvil')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_beacon')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_blast_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_brewingstand')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_campfire')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_cartography_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_crafting_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_grindstone')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_lectern')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_loom')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smithing_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smoker')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_stonecutter')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('jump')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('leave_game')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('minecart_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mob_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_barrel')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_enderchest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pig_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_record')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pot_flower')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_trigger')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_win')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sleep_in_bed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sneak_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sprint_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('strider_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('swim_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('talked_to_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('target_hit')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_death')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_rest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('total_world_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('traded_with_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('trigger_trapped_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tune_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('use_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_on_water_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_under_water_one_cm')).storeFlat("tokens", "").name("json_literal"))), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crafted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('broken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('picked_up')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('dropped')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mined')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed_by')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(group(literal('stepping_on')).storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('team').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(group(literal('targeted_entity')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('vehicle').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _ENTITY_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(EFFECT_ID.storeVar("tokens").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('ambient').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('amplifier').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('visible').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('equipment').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('mainhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('offhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('head').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('chest').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('legs').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('feet').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('flags').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('is_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sneaking')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sprinting')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_swimming')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_baby')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(group(literal('lightning_bolt')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('blocks_set_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('entity_struck')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND")), group(literal('passenger').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('looking_at')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('advancements').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), choice(BOOLEAN.storeVar("tokens").hint("BOOLEAN"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('gamemode').storeFlat("tokens", "").name("json_key"), optional(COLON), GAMEMODE.storeFlat("tokens", "").hint("GAMEMODE")), group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('stats').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('custom')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('animals_bred')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('aviate_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bell_ring')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('boat_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_armor')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_banner')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('climb_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crouch_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_blocked_by_shield')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_taken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('deaths')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('drop')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('eat_cake_slice')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enchant_item')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fall_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fill_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fish_caught')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fly_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('horse_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dispenser')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dropper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_hopper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_anvil')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_beacon')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_blast_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_brewingstand')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_campfire')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_cartography_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_crafting_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_grindstone')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_lectern')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_loom')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smithing_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smoker')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_stonecutter')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('jump')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('leave_game')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('minecart_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mob_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_barrel')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_enderchest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pig_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_record')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pot_flower')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_trigger')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_win')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sleep_in_bed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sneak_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sprint_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('strider_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('swim_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('talked_to_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('target_hit')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_death')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_rest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('total_world_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('traded_with_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('trigger_trapped_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tune_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('use_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_on_water_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_under_water_one_cm')).storeFlat("tokens", "").name("json_literal"))), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crafted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('broken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('picked_up')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('dropped')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mined')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed_by')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(group(literal('stepping_on')).storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('team').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(group(literal('targeted_entity')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('vehicle').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _ENTITY_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(EFFECT_ID.storeVar("tokens").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('ambient').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('amplifier').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('visible').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('equipment').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('mainhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('offhand').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('head').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('chest').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('legs').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('feet').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('flags').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('is_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sneaking')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_sprinting')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_swimming')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_baby')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(group(literal('lightning_bolt')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('blocks_set_on_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('entity_struck')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND")), group(literal('passenger').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('looking_at')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('advancements').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), choice(BOOLEAN.storeVar("tokens").hint("BOOLEAN"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('gamemode').storeFlat("tokens", "").name("json_key"), optional(COLON), GAMEMODE.storeFlat("tokens", "").hint("GAMEMODE")), group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(RESOURCE_LOCATION.storeVar("tokens").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('stats').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('custom')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('animals_bred')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('aviate_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bell_ring')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('boat_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_armor')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_banner')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('clean_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('climb_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crouch_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_blocked_by_shield')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_absorbed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_dealt_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_resisted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('damage_taken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('deaths')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('drop')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('eat_cake_slice')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enchant_item')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fall_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fill_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fish_caught')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fly_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('horse_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dispenser')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_dropper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inspect_hopper')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_anvil')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_beacon')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_blast_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_brewingstand')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_campfire')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_cartography_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_crafting_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_furnace')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_grindstone')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_lectern')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_loom')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smithing_table')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_smoker')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('interact_with_stonecutter')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('jump')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('leave_game')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('minecart_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mob_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_barrel')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_enderchest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('open_shulker_box')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pig_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_record')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('play_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_kills')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('pot_flower')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_trigger')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('raid_win')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sleep_in_bed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sneak_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('sprint_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('strider_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('swim_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('talked_to_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('target_hit')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_death')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('time_since_rest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('total_world_time')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('traded_with_villager')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('trigger_trapped_chest')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tune_noteblock')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('use_cauldron')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_on_water_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_one_cm')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('walk_under_water_one_cm')).storeFlat("tokens", "").name("json_literal"))), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('crafted')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('broken')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('picked_up')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('dropped')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('mined')).storeFlat("tokens", "").name("json_literal")), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed')).storeFlat("tokens", "").name("json_literal"), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed_by')).storeFlat("tokens", "").name("json_literal"))), group(literal('stat').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(group(literal('stepping_on')).storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('team').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY_ID.storeVar("tokens").hint("ENTITY_ID")), group(group(literal('targeted_entity')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(literal('vehicle').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _DAMAGE_TYPE_PREDICATE = choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('bypasses_armor')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('bypasses_invulnerability')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('bypasses_magic')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('direct_entity')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE")), group(group(literal('is_explosion')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_fire')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_magic')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_projectile')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('is_lightning')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('source_entity')).storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")); define _PREDICATE = literal('MaxRecursionReached').storeFlat("tokens", "").name("json_literal"); define _PREDICATE = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('alternative').storeFlat("tokens", "").name("json_literal")), group(literal('terms').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('block_state_property')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('damage_source_property')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_properties')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_scores')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('scores').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(OBJECTIVE_NAME.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('inverted').storeFlat("tokens", "").name("json_literal")), group(literal('term').storeFlat("tokens", "").name("json_key"), optional(COLON), _PREDICATE.hint("_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('killed_by_player')).storeFlat("tokens", "").name("json_literal")), group(literal('inverse').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('location_check')).storeFlat("tokens", "").name("json_literal")), group(literal('offsetX').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetY').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetZ').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('match_tool')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance_with_looting')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(group(literal('looting_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('reference').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('survive_explosion')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('table_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('chances').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(REAL.storeVar("tokens").hint("REAL"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('time_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('period').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('weather_check')).storeFlat("tokens", "").name("json_literal")), group(literal('raining').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('thundering').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('value_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('range').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _PREDICATE = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('alternative').storeFlat("tokens", "").name("json_literal")), group(literal('terms').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('block_state_property')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('damage_source_property')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_properties')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_scores')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('scores').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(OBJECTIVE_NAME.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('inverted').storeFlat("tokens", "").name("json_literal")), group(literal('term').storeFlat("tokens", "").name("json_key"), optional(COLON), _PREDICATE.hint("_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('killed_by_player')).storeFlat("tokens", "").name("json_literal")), group(literal('inverse').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('location_check')).storeFlat("tokens", "").name("json_literal")), group(literal('offsetX').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetY').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetZ').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('match_tool')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance_with_looting')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(group(literal('looting_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('reference').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('survive_explosion')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('table_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('chances').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(REAL.storeVar("tokens").hint("REAL"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('time_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('period').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('weather_check')).storeFlat("tokens", "").name("json_literal")), group(literal('raining').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('thundering').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('value_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('range').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _PREDICATE = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('alternative').storeFlat("tokens", "").name("json_literal")), group(literal('terms').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('block_state_property')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('damage_source_property')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_properties')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_scores')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('scores').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(OBJECTIVE_NAME.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('inverted').storeFlat("tokens", "").name("json_literal")), group(literal('term').storeFlat("tokens", "").name("json_key"), optional(COLON), _PREDICATE.hint("_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('killed_by_player')).storeFlat("tokens", "").name("json_literal")), group(literal('inverse').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('location_check')).storeFlat("tokens", "").name("json_literal")), group(literal('offsetX').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetY').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetZ').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('match_tool')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance_with_looting')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(group(literal('looting_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('reference').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('survive_explosion')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('table_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('chances').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(REAL.storeVar("tokens").hint("REAL"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('time_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('period').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('weather_check')).storeFlat("tokens", "").name("json_literal")), group(literal('raining').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('thundering').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('value_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('range').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _PREDICATE = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('alternative').storeFlat("tokens", "").name("json_literal")), group(literal('terms').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('block_state_property')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('damage_source_property')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_properties')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_scores')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('scores').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(OBJECTIVE_NAME.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('inverted').storeFlat("tokens", "").name("json_literal")), group(literal('term').storeFlat("tokens", "").name("json_key"), optional(COLON), _PREDICATE.hint("_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('killed_by_player')).storeFlat("tokens", "").name("json_literal")), group(literal('inverse').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('location_check')).storeFlat("tokens", "").name("json_literal")), group(literal('offsetX').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetY').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetZ').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('match_tool')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance_with_looting')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(group(literal('looting_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('reference').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('survive_explosion')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('table_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('chances').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(REAL.storeVar("tokens").hint("REAL"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('time_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('period').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('weather_check')).storeFlat("tokens", "").name("json_literal")), group(literal('raining').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('thundering').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('value_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('range').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _PREDICATE = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('alternative').storeFlat("tokens", "").name("json_literal")), group(literal('terms').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('block_state_property')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('damage_source_property')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_properties')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('entity_scores')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('scores').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(OBJECTIVE_NAME.storeVar("tokens").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('inverted').storeFlat("tokens", "").name("json_literal")), group(literal('term').storeFlat("tokens", "").name("json_key"), optional(COLON), _PREDICATE.hint("_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('killed_by_player')).storeFlat("tokens", "").name("json_literal")), group(literal('inverse').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('location_check')).storeFlat("tokens", "").name("json_literal")), group(literal('offsetX').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetY').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('offsetZ').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('match_tool')).storeFlat("tokens", "").name("json_literal")), group(literal('predicate').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('random_chance_with_looting')).storeFlat("tokens", "").name("json_literal")), group(literal('chance').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL")), group(group(literal('looting_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('reference').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('survive_explosion')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('table_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('chances').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(REAL.storeVar("tokens").hint("REAL"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('time_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('period').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('weather_check')).storeFlat("tokens", "").name("json_literal")), group(literal('raining').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('thundering').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('condition').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('value_check')).storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('range').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _ENTITY_OR_PREDICATE = choice(_ENTITY_PREDICATE.hint("_ENTITY_PREDICATE"), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_PREDICATE.hint("_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); define _ADVANCEMENT_CRITERIA = choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bee_nest_destroyed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(group(literal('num_bees_inside')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bred_animals')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('child').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('partner').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('brewed_potion')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('potion').storeFlat("tokens", "").name("json_key"), optional(COLON), _POTION_ID.hint("_POTION_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('changed_dimension')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('from').storeFlat("tokens", "").name("json_key"), optional(COLON), DIMENSION_ID.storeVar("tokens").hint("DIMENSION_ID")), group(literal('to').storeFlat("tokens", "").name("json_key"), optional(COLON), DIMENSION_ID.storeVar("tokens").hint("DIMENSION_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('channeled_lightning')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('victims').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('construct_beacon')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('consume_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('cured_zombie_villager')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('villager').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('zombie').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('effects_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(EFFECT_ID.storeVar("tokens").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('amplifier').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enchanted_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enter_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('entity_hurt_player')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('entity_killed_player')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(group(literal('killing_blow')).storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('filled_bucket')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fishing_rod_hooked')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('rod').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('hero_of_the_village')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('impossible')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inventory_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('items').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ITEM_PREDICATE.hint("_ITEM_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('slots').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('empty').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('full').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('occupied').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('item_durability_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('delta').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('durability').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('item_used_on_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed_by_crossbow')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('unique_entity_types')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('victims').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('leviation')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('lightning_strike')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('lightning').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('bystander').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('location')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('nether_travel')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entered').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('exited').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('placed_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_generate_container_loot')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('loot_table')).storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_hurt_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_interacted_with_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_killed_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(group(literal('killing_blow')).storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('recipe_unlocked')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipe').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('shot_crossbow')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('slept_in_bed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('slide_down_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('started_riding')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('summoned_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tame_animal')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('target_hit')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('signal_strength')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('projectile').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('shooter').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('thrown_item_picked_up_by_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tick')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used_ender_eye')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX.hint("_MIN_MAX"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used_totem')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('using_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('villager_trade')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('villager').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('voluntary_exile')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))); return group(RESOURCE_LOCATION.storeVar("location").hint("The resource location to save into"), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('criteria').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), _ADVANCEMENT_CRITERIA.hint("_ADVANCEMENT_CRITERIA"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), _ADVANCEMENT_CRITERIA.hint("_ADVANCEMENT_CRITERIA"))), group(literal('requirements').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bee_nest_destroyed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(group(literal('num_bees_inside')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('bred_animals')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('child').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('partner').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('brewed_potion')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('potion').storeFlat("tokens", "").name("json_key"), optional(COLON), _POTION_ID.hint("_POTION_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('changed_dimension')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('from').storeFlat("tokens", "").name("json_key"), optional(COLON), DIMENSION_ID.storeVar("tokens").hint("DIMENSION_ID")), group(literal('to').storeFlat("tokens", "").name("json_key"), optional(COLON), DIMENSION_ID.storeVar("tokens").hint("DIMENSION_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('channeled_lightning')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('victims').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('construct_beacon')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('consume_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('cured_zombie_villager')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('villager').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('zombie').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('effects_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(EFFECT_ID.storeVar("tokens").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('amplifier').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enchanted_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('level').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('enter_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('entity_hurt_player')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('entity_killed_player')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(group(literal('killing_blow')).storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('filled_bucket')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('fishing_rod_hooked')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('rod').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('hero_of_the_village')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('impossible')).storeFlat("tokens", "").name("json_literal")), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('inventory_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('items').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ITEM_PREDICATE.hint("_ITEM_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('slots').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('empty').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('full').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('occupied').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('item_durability_changed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('delta').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('durability').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('item_used_on_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('killed_by_crossbow')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('unique_entity_types')).storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('victims').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(_ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('leviation')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX_INT.hint("_MIN_MAX_INT"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('lightning_strike')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('lightning').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('bystander').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('location')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('nether_travel')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entered').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('exited').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('absolute').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('horizontal').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('x').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('y').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX")), group(literal('z').storeFlat("tokens", "").name("json_key"), optional(COLON), _MIN_MAX.hint("_MIN_MAX"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('placed_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('state').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_generate_container_loot')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('loot_table')).storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_hurt_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_interacted_with_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('player_killed_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(group(literal('killing_blow')).storeFlat("tokens", "").name("json_key"), optional(COLON), _DAMAGE_TYPE_PREDICATE.hint("_DAMAGE_TYPE_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('recipe_unlocked')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipe').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('shot_crossbow')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('slept_in_bed')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('slide_down_block')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('started_riding')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('summoned_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tame_animal')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('target_hit')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('signal_strength')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('projectile').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('shooter').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('thrown_item_picked_up_by_entity')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('tick')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used_ender_eye')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('distance').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), _MIN_MAX.hint("_MIN_MAX"))), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('used_totem')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('using_item')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('villager_trade')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), _ITEM_PREDICATE.hint("_ITEM_PREDICATE")), group(literal('villager').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('trigger').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('minecraft'), GLUE, literal(':'), GLUE, literal('voluntary_exile')).storeFlat("tokens", "").name("json_literal")), group(literal('conditions').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('location').storeFlat("tokens", "").name("json_key"), optional(COLON), _LOCATION_PREDICATE.hint("_LOCATION_PREDICATE")), group(literal('player').storeFlat("tokens", "").name("json_key"), optional(COLON), _ENTITY_OR_PREDICATE.hint("_ENTITY_OR_PREDICATE"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('display').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('icon').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('item').storeFlat("tokens", "").name("json_key"), optional(COLON), ITEM_ID.storeVar("tokens").hint("ITEM_ID")), group(literal('nbt').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('title').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('frame').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('challenge').storeFlat("tokens", "").name("json_literal"), literal('goal').storeFlat("tokens", "").name("json_literal"), literal('task').storeFlat("tokens", "").name("json_literal"))), group(literal('background').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('description').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(group(literal('show_toast')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(group(literal('announce_to_chat')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('hidden').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('parent').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('rewards').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('recipes').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('loot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('experience').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"), OPTIONAL_NAME_INNER_FUNCTION.storeVar("tokens").hint("OPTIONAL_NAME_INNER_FUNCTION")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), BOOLEAN.storeVar("pretty_print").hint("Whether to pretty print the content").optional());