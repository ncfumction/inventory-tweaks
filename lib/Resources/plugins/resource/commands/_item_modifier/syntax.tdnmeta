define _NUMBER_PROVIDER = literal('MaxRecursionReached').storeFlat("tokens", "").name("json_literal"); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); define _NUMBER_PROVIDER = choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('constant').storeFlat("tokens", "").name("json_literal")), group(literal('value').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(INTEGER.storeVar("tokens").hint("INTEGER"), REAL.storeVar("tokens").hint("REAL")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('uniform').storeFlat("tokens", "").name("json_literal")), group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('binomial').storeFlat("tokens", "").name("json_literal")), group(literal('n').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('p').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('score').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('fixed').storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), ENTITY.storeVar("tokens").hint("ENTITY"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('direct_killer')).storeFlat("tokens", "").name("json_literal"), group(literal('player_killer')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('score').storeFlat("tokens", "").name("json_key"), optional(COLON), OBJECTIVE_NAME.storeVar("tokens").hint("OBJECTIVE_NAME")), group(literal('scale').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), POINTER.storeVar("tokens").hint("POINTER")); return group(RESOURCE_LOCATION.storeVar("location").hint("The resource location to save into"), choice(choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('binomial_with_bonus_count')).storeFlat("tokens", "").name("json_literal")), group(literal('parameters').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('extra').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('probability').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('uniform_bonus_count')).storeFlat("tokens", "").name("json_literal")), group(literal('parameters').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('bonus_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('ore_drops')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('copy_nbt')).storeFlat("tokens", "").name("json_literal")), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('block_entity')).storeFlat("tokens", "").name("json_literal"), literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('block_entity')).storeFlat("tokens", "").name("json_literal"), literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('storage').storeFlat("tokens", "").name("json_literal")), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('ops').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_PATH.storeVar("tokens").hint("NBT_PATH")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_PATH.storeVar("tokens").hint("NBT_PATH")), group(literal('op').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('replace').storeFlat("tokens", "").name("json_literal"), literal('append').storeFlat("tokens", "").name("json_literal"), literal('merge').storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('copy_state')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('enchant_randomly')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantments').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('enchant_with_level')).storeFlat("tokens", "").name("json_literal")), group(literal('treasure').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('levels').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('exploration_map')).storeFlat("tokens", "").name("json_literal")), group(literal('destination').storeFlat("tokens", "").name("json_key"), optional(COLON), STRUCTURE.storeVar("tokens").hint("STRUCTURE")), group(literal('decoration').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('zoom').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('search_radius')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('skip_existing_chunk')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('explosion_decay')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('furnace_smelt')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('fill_player_head')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('limit_count')).storeFlat("tokens", "").name("json_literal")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('limit_count')).storeFlat("tokens", "").name("json_literal")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('looting_enchant')).storeFlat("tokens", "").name("json_literal")), group(literal('count').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_attributes')).storeFlat("tokens", "").name("json_literal")), group(literal('modifiers').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('attribute').storeFlat("tokens", "").name("json_key"), optional(COLON), ATTRIBUTE_ID.storeVar("tokens").hint("ATTRIBUTE_ID")), group(literal('operation').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('addition').storeFlat("tokens", "").name("json_literal"), group(literal('multiply_base')).storeFlat("tokens", "").name("json_literal"), group(literal('multiply_total')).storeFlat("tokens", "").name("json_literal"))), group(literal('amount').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('id').storeFlat("tokens", "").name("json_key"), optional(COLON), UUID.storeVar("tokens").hint("UUID")), group(literal('slot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('mainhand').storeFlat("tokens", "").name("json_literal"), literal('offhand').storeFlat("tokens", "").name("json_literal"), literal('feet').storeFlat("tokens", "").name("json_literal"), literal('legs').storeFlat("tokens", "").name("json_literal"), literal('chest').storeFlat("tokens", "").name("json_literal"), literal('head').storeFlat("tokens", "").name("json_literal"), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(literal('mainhand').storeFlat("tokens", "").name("json_literal"), literal('offhand').storeFlat("tokens", "").name("json_literal"), literal('feet').storeFlat("tokens", "").name("json_literal"), literal('legs').storeFlat("tokens", "").name("json_literal"), literal('chest').storeFlat("tokens", "").name("json_literal"), literal('head').storeFlat("tokens", "").name("json_literal")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_banner_patterns')).storeFlat("tokens", "").name("json_literal")), group(literal('patterns').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('pattern').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('color').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COLOR.storeVar("tokens").hint("TEXT_COLOR"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_contents')).storeFlat("tokens", "").name("json_literal")), group(literal('entries').storeFlat("tokens", "").name("json_key"), optional(COLON), INTERPOLATION_BLOCK.storeVar("tokens"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_count')).storeFlat("tokens", "").name("json_literal")), group(literal('count').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_damage')).storeFlat("tokens", "").name("json_literal")), group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_enchantments')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantments').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(ENCHANTMENT_ID.storeVar("tokens").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_loot_table')).storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('seed').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_lore')).storeFlat("tokens", "").name("json_literal")), group(literal('lore').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('replace').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_name')).storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_nbt')).storeFlat("tokens", "").name("json_literal")), group(literal('tag').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_stew_effect')).storeFlat("tokens", "").name("json_literal")), group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), EFFECT_ID.storeVar("tokens").hint("EFFECT_ID")), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('binomial_with_bonus_count')).storeFlat("tokens", "").name("json_literal")), group(literal('parameters').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('extra').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(literal('probability').storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('uniform_bonus_count')).storeFlat("tokens", "").name("json_literal")), group(literal('parameters').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(group(literal('bonus_multiplier')).storeFlat("tokens", "").name("json_key"), optional(COLON), REAL.storeVar("tokens").hint("REAL"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('apply_bonus')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantment').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID")), group(literal('formula').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('ore_drops')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('copy_nbt')).storeFlat("tokens", "").name("json_literal")), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('block_entity')).storeFlat("tokens", "").name("json_literal"), literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('context').storeFlat("tokens", "").name("json_literal")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(literal('block_entity')).storeFlat("tokens", "").name("json_literal"), literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), literal('storage').storeFlat("tokens", "").name("json_literal")), group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), group(literal('ops').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('source').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_PATH.storeVar("tokens").hint("NBT_PATH")), group(literal('target').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_PATH.storeVar("tokens").hint("NBT_PATH")), group(literal('op').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('replace').storeFlat("tokens", "").name("json_literal"), literal('append').storeFlat("tokens", "").name("json_literal"), literal('merge').storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('copy_state')).storeFlat("tokens", "").name("json_literal")), group(literal('block').storeFlat("tokens", "").name("json_key"), optional(COLON), BLOCK_ID.storeVar("tokens").hint("BLOCK_ID")), group(literal('properties').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('enchant_randomly')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantments').storeFlat("tokens", "").name("json_key"), optional(COLON), ENCHANTMENT_ID.storeVar("tokens").hint("ENCHANTMENT_ID"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('enchant_with_level')).storeFlat("tokens", "").name("json_literal")), group(literal('treasure').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN")), group(literal('levels').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('exploration_map')).storeFlat("tokens", "").name("json_literal")), group(literal('destination').storeFlat("tokens", "").name("json_key"), optional(COLON), STRUCTURE.storeVar("tokens").hint("STRUCTURE")), group(literal('decoration').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('zoom').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('search_radius')).storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER")), group(group(literal('skip_existing_chunk')).storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('explosion_decay')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('furnace_smelt')).storeFlat("tokens", "").name("json_literal"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('fill_player_head')).storeFlat("tokens", "").name("json_literal")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('limit_count')).storeFlat("tokens", "").name("json_literal")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('limit_count')).storeFlat("tokens", "").name("json_literal")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('min').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('max').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('looting_enchant')).storeFlat("tokens", "").name("json_literal")), group(literal('count').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('limit').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_attributes')).storeFlat("tokens", "").name("json_literal")), group(literal('modifiers').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('attribute').storeFlat("tokens", "").name("json_key"), optional(COLON), ATTRIBUTE_ID.storeVar("tokens").hint("ATTRIBUTE_ID")), group(literal('operation').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('addition').storeFlat("tokens", "").name("json_literal"), group(literal('multiply_base')).storeFlat("tokens", "").name("json_literal"), group(literal('multiply_total')).storeFlat("tokens", "").name("json_literal"))), group(literal('amount').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('id').storeFlat("tokens", "").name("json_key"), optional(COLON), UUID.storeVar("tokens").hint("UUID")), group(literal('slot').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('mainhand').storeFlat("tokens", "").name("json_literal"), literal('offhand').storeFlat("tokens", "").name("json_literal"), literal('feet').storeFlat("tokens", "").name("json_literal"), literal('legs').storeFlat("tokens", "").name("json_literal"), literal('chest').storeFlat("tokens", "").name("json_literal"), literal('head').storeFlat("tokens", "").name("json_literal"), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(literal('mainhand').storeFlat("tokens", "").name("json_literal"), literal('offhand').storeFlat("tokens", "").name("json_literal"), literal('feet').storeFlat("tokens", "").name("json_literal"), literal('legs').storeFlat("tokens", "").name("json_literal"), literal('chest').storeFlat("tokens", "").name("json_literal"), literal('head').storeFlat("tokens", "").name("json_literal")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_banner_patterns')).storeFlat("tokens", "").name("json_literal")), group(literal('patterns').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('pattern').storeFlat("tokens", "").name("json_key"), optional(COLON), STRING_LITERAL_OR_IDENTIFIER_A.storeVar("tokens").hint("STRING_LITERAL_OR_IDENTIFIER_A")), group(literal('color').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COLOR.storeVar("tokens").hint("TEXT_COLOR"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_contents')).storeFlat("tokens", "").name("json_literal")), group(literal('entries').storeFlat("tokens", "").name("json_key"), optional(COLON), INTERPOLATION_BLOCK.storeVar("tokens"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_count')).storeFlat("tokens", "").name("json_literal")), group(literal('count').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_damage')).storeFlat("tokens", "").name("json_literal")), group(literal('damage').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER")), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_enchantments')).storeFlat("tokens", "").name("json_literal")), group(literal('enchantments').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(ENCHANTMENT_ID.storeVar("tokens").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('add').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_loot_table')).storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), RESOURCE_LOCATION.storeVar("tokens").hint("RESOURCE_LOCATION")), group(literal('seed').storeFlat("tokens", "").name("json_key"), optional(COLON), INTEGER.storeVar("tokens").hint("INTEGER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_lore')).storeFlat("tokens", "").name("json_literal")), group(literal('lore').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT"), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal"))), group(literal('replace').storeFlat("tokens", "").name("json_key"), optional(COLON), BOOLEAN.storeVar("tokens").hint("BOOLEAN"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_name')).storeFlat("tokens", "").name("json_literal")), group(literal('name').storeFlat("tokens", "").name("json_key"), optional(COLON), TEXT_COMPONENT.storeVar("tokens").hint("TEXT_COMPONENT")), group(literal('entity').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(literal('this').storeFlat("tokens", "").name("json_literal"), literal('killer').storeFlat("tokens", "").name("json_literal"), group(literal('killer_player')).storeFlat("tokens", "").name("json_literal")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_nbt')).storeFlat("tokens", "").name("json_literal")), group(literal('tag').storeFlat("tokens", "").name("json_key"), optional(COLON), NBT_COMPOUND.storeVar("tokens").hint("NBT_COMPOUND"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('function').storeFlat("tokens", "").name("json_key"), optional(COLON), group(literal('set_stew_effect')).storeFlat("tokens", "").name("json_literal")), group(literal('effects').storeFlat("tokens", "").name("json_key"), optional(COLON), choice(group(brace('[').storeFlat("tokens", "").hint("List"), list(group(choice(group(brace('{').storeFlat("tokens", "").hint("Dictionary"), list(group(optional(literal('-')), choice(group(literal('type').storeFlat("tokens", "").name("json_key"), optional(COLON), EFFECT_ID.storeVar("tokens").hint("EFFECT_ID")), group(literal('duration').storeFlat("tokens", "").name("json_key"), optional(COLON), _NUMBER_PROVIDER.hint("_NUMBER_PROVIDER"))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens")))), optional(COMMA))).optional(), brace('}').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), optional(COMMA))).optional(), brace(']').storeFlat("tokens", "")), INTERPOLATION_BLOCK.storeVar("tokens"))), BOOLEAN.storeVar("pretty_print").hint("Whether to pretty print the content").optional());